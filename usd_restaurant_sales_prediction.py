# -*- coding: utf-8 -*-
"""USD_restaurant_sales_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y-o-hsO0dKy32_DuVIbWNe3SsgFXApb5

##**Import modules**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

"""##**Load dataset**"""

df = pd.read_csv('weekly_sales_10stores.csv')
df.head()

"""##**Understanding the dataset**"""

df.describe()

df.info()

# check unique values in dataset
df.nunique()

"""##**Preprocessing the dataset**"""

df.isnull().sum()

cat_col = []
for x in df.dtypes.index:
  if df.dtypes[x] == 'object':
    cat_col.append(x)
cat_col

for col in cat_col:
    print(col)
    print(df[col].value_counts())
    print()

"""##**Exploratory Data Analysis**"""

df.head()

pip uninstall pandas-profiling

pip install pandas-profiling

from pandas_profiling import ProfileReport

report = df.profile_report(html={'style':{'full_width':True}})
report.to_notebook_iframe()

sn = pd.DataFrame(df.groupby(['Store_num']).agg({'Sales': 'sum'}))
sn.plot.bar(figsize=(12, 6))

sns.distplot(df['Del'])

sns.distplot(df['Sold'])

sns.distplot(df['Cost'])

"""l = list(df['Description'].unique())
chart = sns.countplot(df["Description"])
chart.set_xticklabels(labels=l, rotation=90)"""

sns.countplot(df['Year'])

"""#**Correlation Matrix**"""

corr = df.corr()
#sns.set(rc = {'figure.figsize':(15,8)})
plt.figure(figsize = (15,8))
sns.heatmap(corr, annot=True, cmap='coolwarm')

"""##**Label Encoding**"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
for col in cat_col:
    df[col] = le.fit_transform(df[col])

"""##**Input & Output split**"""

df.columns

X = df.drop(columns=['Sales', 'INV_NUMBER', 'Description', 'Del', 'Date', 'Year', 'Month', 'Day'])
y = df['Sales']

from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_squared_error
def train(model, X, y):
    # train the model
    model.fit(X, y)
    
    # predict the training set
    pred = model.predict(X)
    
    # perform cross-validation
    cv_score = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=5)
    cv_score = np.abs(np.mean(cv_score))
    
    print("Model Report")
    print("MSE:",mean_squared_error(y,pred))
    print("CV Score:", cv_score)

from sklearn.linear_model import LinearRegression, Ridge, Lasso
model = LinearRegression(normalize=True)
train(model, X, y)
coef = pd.Series(model.coef_, X.columns).sort_values()
coef.plot(kind='bar', title="Model Coefficients")

model = Ridge(normalize=True)
train(model, X, y)
coef = pd.Series(model.coef_, X.columns).sort_values()
coef.plot(kind='bar', title="Model Coefficients")

model = Lasso()
train(model, X, y)
coef = pd.Series(model.coef_, X.columns).sort_values()
coef.plot(kind='bar', title="Model Coefficients")

from sklearn.tree import DecisionTreeRegressor
model = DecisionTreeRegressor()
train(model, X, y)
coef = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)
coef.plot(kind='bar', title="Feature Importance")

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
train(model, X, y)
coef = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)
coef.plot(kind='bar', title="Feature Importance")

from sklearn.ensemble import ExtraTreesRegressor
model = ExtraTreesRegressor()
train(model, X, y)
coef = pd.Series(model.feature_importances_, X.columns).sort_values(ascending=False)
coef.plot(kind='bar', title="Feature Importance")

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

model = Lasso()
model.fit(X_train, y_train)
    
# predict the training set
pred = model.predict(X_test)

# perform cross-validation
cv_score = cross_val_score(model, X_test, y_test, scoring='neg_mean_squared_error', cv=5)
cv_score = np.abs(np.mean(cv_score))

print("Model Report")
print("MSE:",mean_squared_error(y_test,pred))
print("CV Score:", cv_score)

coef = pd.Series(model.coef_, X.columns).sort_values()
coef.plot(kind='bar', title="Model Coefficients")

pred